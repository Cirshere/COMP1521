FPCLASSIFY(3)              Linux Programmer's Manual             FPCLASSIFY(3)



NNAAMMEE
       fpclassify, isfinite, isnormal, isnan, isinf - floating-point classifi‐
       cation macros

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<mmaatthh..hh>>

       iinntt ffppccllaassssiiffyy((_x));;

       iinntt iissffiinniittee((_x));;

       iinntt iissnnoorrmmaall((_x));;

       iinntt iissnnaann((_x));;

       iinntt iissiinnff((_x));;

       Link with _-_l_m.

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ffppccllaassssiiffyy(), iissffiinniittee(), iissnnoorrmmaall():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
       iissnnaann():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || _XOPEN_SOURCE
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* Glibc versions <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
       iissiinnff():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* Glibc versions <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DDEESSCCRRIIPPTTIIOONN
       Floating point numbers can have special values,  such  as  infinite  or
       NaN.   With  the  macro  ffppccllaassssiiffyy((_x)) you can find out what type _x is.
       The macro takes any floating-point expression as argument.  The  result
       is one of the following values:

       FFPP__NNAANN        _x is "Not a Number".

       FFPP__IINNFFIINNIITTEE   _x is either positive infinity or negative infinity.

       FFPP__ZZEERROO       _x is zero.

       FFPP__SSUUBBNNOORRMMAALL  _x is too small to be represented in normalized format.

       FFPP__NNOORRMMAALL     if nothing of the above is correct then it must be a nor‐
                     mal floating-point number.

       The other macros provide a short answer to some standard questions.

       iissffiinniittee((_x))   returns a nonzero value if
                     (fpclassify(x) != FP_NAN && fpclassify(x) != FP_INFINITE)

       iissnnoorrmmaall((_x))   returns a nonzero value if (fpclassify(x) == FP_NORMAL)

       iissnnaann((_x))      returns a nonzero value if (fpclassify(x) == FP_NAN)

       iissiinnff((_x))      returns 1 if _x is positive infinity, and -1 if _x is nega‐
                     tive infinity.

AATTTTRRIIBBUUTTEESS
       For   an   explanation   of   the  terms  used  in  this  section,  see
       aattttrriibbuutteess(7).

       ┌─────────────────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee                    │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├─────────────────────────────┼───────────────┼─────────┤
       │ffppccllaassssiiffyy(), iissffiinniittee(),    │ Thread safety │ MT-Safe │
       │iissnnoorrmmaall(), iissnnaann(), iissiinnff() │               │         │
       └─────────────────────────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, C99.

       For  iissiinnff(), the standards merely say that the return value is nonzero
       if and only if the argument has an infinite value.

NNOOTTEESS
       In glibc 2.01 and earlier, iissiinnff() returns a nonzero  value  (actually:
       1)  if  _x is positive infinity or negative infinity.  (This is all that
       C99 requires.)

SSEEEE AALLSSOO
       ffiinniittee(3), IINNFFIINNIITTYY(3), iissggrreeaatteerr(3), ssiiggnnbbiitt(3)

CCOOLLOOPPHHOONN
       This page is part of release 4.10 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, information about reporting bugs, and the
       latest    version    of    this    page,    can     be     found     at
       https://www.kernel.org/doc/man-pages/.



                                  2016-03-15                     FPCLASSIFY(3)
